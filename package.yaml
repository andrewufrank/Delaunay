name:           ShortestPath
version:        0.2.3

ghc-options: -Wall
description: 
  version 0.2.3 try hgeometry

  version 0.2.2 try m ruegenberg graphics.triangulation.delaunay
    version 0.2.1 - try a shortest path in the main 
    copied from https://stackoverflow.com/questions/14012603/how-to-implement-dijkstra-algorithm-in-haskell
    seems to allow functions and code is simpler than my old 
    dijkstra code 
    naive, incomplete
dependencies:
  - base == 4.*
  # - delaunay  cannot satisfy dependencies for AC-Vector
  # - hgeometry
  - hgeometry ==0.14
  - uniformBase
  - array                    >= 0.5
  - hgeometry
  - hgeometry-combinatorial
  # - hgeometry-ipe            >= 0.14
  - lens
  - linear
  - semigroups
  - vector-circular
#   - uniform-strings
#   - uniform-convenience
# #  - test-framework 
#   - QuickCheck
#   - HTF

library:
  source-dirs: Code
executables:
  foo:
    main: Main.hs
    source-dirs: src
    dependencies: 
      - ShortestPath
      # - TestSimple

default-extensions: TypeFamilies
                    , GADTs
                    , DataKinds
                    , TypeOperators
                    , ConstraintKinds
                    , PolyKinds
                    , PatternSynonyms
                    , ViewPatterns       
                    , TypeApplications # added af
# tests:
#   test1:
#     main: ExampleTesting.hs
#     source-dirs: tests
#     dependencies: 
#       - TestSimple
# #      - QuickCheck 
# #      - test-framework 

